name: "test: maintenance playbook"

on:
  pull_request:
    paths:
      - maintenance.yml
      - .github/workflows/maintenance.yml
      - .github/actions/ansible-setup/**
      - tests/maintenance/**

jobs:
  maintenance:
    name: Maintenance smoke test (ansible ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Ansible tooling
        uses: ./.github/actions/ansible-setup

      - name: Validate maintenance playbook syntax
        run: ansible-playbook maintenance.yml --syntax-check

      - name: Apply maintenance playbook against test inventory
        run: |
          ansible-playbook maintenance.yml \
            -i tests/maintenance/inventory/hosts.ini \
            --diff | tee maintenance.log

      - name: Verify GitHub SSH key was applied
        run: |
          set -euo pipefail

          authorized_keys="${HOME}/.ssh/authorized_keys"
          if [[ ! -f "${authorized_keys}" ]]; then
            echo "Expected ${authorized_keys} to exist after maintenance playbook run" >&2
            exit 1
          fi

          if ! grep -q 'vagrant insecure public key' "${authorized_keys}"; then
            echo "Expected test SSH key to be present in authorized_keys" >&2
            exit 1
          fi

      - name: Assert maintenance playbook completed without failures
        run: |
          set -euo pipefail

          recap_line=$(awk '/^PLAY RECAP/ { getline; print; exit }' maintenance.log)
          if [[ -z "${recap_line}" ]]; then
            echo 'Unable to locate PLAY RECAP in Ansible output' >&2
            exit 1
          fi

          if [[ ${recap_line} =~ ok=([0-9]+) ]]; then
            ok_count=${BASH_REMATCH[1]}
          else
            echo "Could not parse ok count from recap line: ${recap_line}" >&2
            exit 1
          fi

          if [[ ${recap_line} =~ failed=([0-9]+) ]]; then
            failed_count=${BASH_REMATCH[1]}
          else
            echo "Could not parse failed count from recap line: ${recap_line}" >&2
            exit 1
          fi

          if [[ ${ok_count} -eq 0 ]]; then
            echo 'Maintenance playbook did not execute any tasks' >&2
            exit 1
          fi

          if [[ ${failed_count} -ne 0 ]]; then
            echo "Maintenance playbook reported failures: ${recap_line}" >&2
            exit 1
          fi
